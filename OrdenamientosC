//BubbleSort
/* 
 * File:   main.c
 * Author: diegogonzalez
 *
 * Created on 21 de marzo de 2017, 15:29
 */

#include <stdio.h>
#include <stdbool.h>

int main() {

    int[] bubbleSort(int[] unordered) {
        int [9] ordered = unordered;
        bool swap;
        int auxSwap, i, j;
        
        for (i = 0; i < n - 1; i++) {
            swap = false;
            for (j = 0; j < n - 1; j++) {
                if (ordered[j] > ordered [ j + 1])
                    auxSwap = ordered[j];
                ordered[j] = ordered[j + 1];
                ordered[j + 1] = auxSwap;
                swap = true;
            }
        }
    }
    if (!swap);
    break;
    
    return null;
}

//InsertionSort

/* 
 * File:   InsertionSort.c
 * Author: diegogonzalez
 *
 * Created on 1 de mayo de 2017, 13:49
 */

#include <stdio.h>
#include <stdlib.h>

/*
 * 
 */
int main() {
    int array[] = {4, 5, 9, 20, 10, 50, 10, 1, 2, 3};


    for (int i = 0; i < 10 ; i++) {
        printf("%d", &array[i]);
    }
    int aux = 0;
    int i;
    int j;

    for (i = 1; i < 10; i++) {
        aux = array[i];
        for (j = i - 1; j >= 0 && array[j] > aux; j--) {
            array[j + 1] = array[j];
            array[j] = aux;
        }    
    }
    return -1;
}

//QuickSort

/* 
 * File:   QuickSortC.c
 * Author: diegogonzalez
 *
 * Created on 1 de mayo de 2017, 14:07
 */

#include <stdio.h>
#include <stdlib.h>

/*
 * 
 */
int main() {
    int array[] = {4, 5, 9, 20, 10, 50, 10, 1, 2, 3};

    //Se recorre el arreglo aumentando en 1 
    for (int i = 0; i < array; i++) {
        printf("%d", array[i]);
    }

}

int ordenarQuicksort(int array[]) {
    //El arrelgo va a ser igual al arreglo ordenado 
    array = quickSort1(array);

}

int quickSort1(int numeros[]) {
    //Se crea el arreglo nuevamente, ya que el primer quicksort es para el arreglo ordenado 
    return quickSort2(numeros, 0, 5 - 1);

}

//Este QuickSort es donde va todo el mÃ©todo de intercambio

int quickSort2(int numeros[], int izq, int der) {

    if (izq >= der) {
        return numeros;
    }
    int i = izq, d = der;
    if (izq != der) {
        int pib;
        int aux;
        pib = izq;
        while (izq != der) {
            while (numeros[der] >= numeros[pib] && izq < der) {
                der--;
            }
            while (numeros[izq] < numeros[pib] && izq < der) {
                izq++;
            }
            if (der != izq) {
                aux = numeros[der];
                numeros[der] = numeros[izq];
                numeros[izq] = aux;
            }
            if (der != izq) {
                quickSort2(numeros, i, izq - 1);
                quickSort2(numeros, izq + 1, d);
            }
        }
    } else {
        return numeros;
    }
    return numeros;
}










